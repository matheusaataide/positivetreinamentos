{"version":3,"sources":["../../src/controllers/courses.js"],"names":["CourseController","database","list","req","res","courses","findAll","status","httpStatus","OK","json","content","console","log","INTERNAL_SERVER_ERROR","error","stack","index","id","params","findByPk","course","remove","BAD_REQUEST","destroy","where","flag","photo","fs","unlink","path","join","__dirname","err","insert","newCourse","body","profile_pic","file","filename","create","edit","oldData","msg","update","newData","CREATED"],"mappings":"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","sourcesContent":["import httpStatus from 'http-status';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\nconst CourseController = database => ({\r\n    list: async (req, res) => {\r\n        try {\r\n            const { courses } = database;\r\n\r\n            const list = await courses.findAll();\r\n\r\n            return res\r\n                .status(httpStatus.OK)\r\n                .json({\r\n                    status: true,\r\n                    content: list \r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n    index: async (req, res) => {\r\n        try {\r\n            const { courses } = database;\r\n\r\n            const { id } = req.params;\r\n\r\n            const course = await courses.findByPk(id);\r\n\r\n            return res\r\n                .status(httpStatus.OK)\r\n                .json({\r\n                    status: course !== null,\r\n                    content: course \r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n    remove: async (req, res) => {\r\n        try {\r\n            const { courses } = database;\r\n\r\n            const { id } = req.params;\r\n\r\n            const course = await courses.findByPk(id);\r\n\r\n            if (course === null) \r\n                return res\r\n                        .status(httpStatus.BAD_REQUEST)\r\n                        .json({\r\n                            status: false,\r\n                            content: {}\r\n                        });\r\n\r\n            const flag = await courses.destroy({ where: { id }});\r\n            if (course.photo !== null && course.photo !== \"\") {\r\n                fs.unlink(\r\n                    path.join(__dirname, '..', 'uploads', course.photo),\r\n                    err => {\r\n                        if (err) console.error(err.stack);\r\n                    }\r\n                );\r\n            }\r\n\r\n            return res\r\n                .status(httpStatus.OK)\r\n                .json({\r\n                    status: flag === 1,\r\n                    content: course \r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n    insert: async (req, res) => {\r\n        try {\r\n            const { courses } = database;\r\n\r\n            let newCourse = { \r\n                ...req.body,\r\n                profile_pic: req.file ? req.file.filename : ''\r\n             }\r\n\r\n            const course = await courses.create(newCourse);\r\n\r\n            return res\r\n                .status(httpStatus.OK)\r\n                .json({\r\n                    status: true,\r\n                    content: course \r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n    edit: async (req, res) => {\r\n        try {\r\n            const { courses } = database;\r\n\r\n            const { id } = req.params;\r\n\r\n            const oldData = await courses.findByPk(id);\r\n            if (oldData === null)\r\n                return res\r\n                    .status(httpStatus.BAD_REQUEST)\r\n                    .json({\r\n                        status: false,\r\n                        msg: 'Instance not found.'\r\n                    });\r\n            \r\n            if (req.file) {\r\n                if (oldData.photo !== null && \r\n                    oldData.photo !== \"\") {\r\n                    fs.unlink(  \r\n                        path.join(__dirname, '..', 'uploads',\r\n                        oldData.photo),\r\n                        err => {\r\n                            if (err) console.error(err.stack);\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n\r\n            const [ flag ] = await courses.update({\r\n                ...oldData,\r\n                ...req.body,\r\n                photo: req.file ? req.file.filename : oldData.photo\r\n            }, { where: req.params });\r\n\r\n            const newData = await courses.findByPk(id);\r\n            return res\r\n                    .status(httpStatus.CREATED)\r\n                    .json({\r\n                        status: flag === 1,\r\n                        content: newData\r\n                    });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n});\r\n\r\nexport default CourseController;\r\n"],"file":"courses.js"}