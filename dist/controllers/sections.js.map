{"version":3,"sources":["../../src/controllers/sections.js"],"names":["SectionController","database","getByName","req","res","sections","findAll","where","params","status","attributes","list","section","forEach","item","key","value","httpStatus","OK","json","content","console","log","INTERNAL_SERVER_ERROR","error","stack","index","name","findOne","edit","oldData","BAD_REQUEST","msg","file","fs","unlink","path","join","__dirname","err","update","body","filename","flag","findByPk","id","newData","CREATED"],"mappings":"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","sourcesContent":["import httpStatus from 'http-status';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\nconst SectionController = database => ({\r\n    getByName: async (req, res) => {\r\n        try {\r\n            const { sections } = database;\r\n\r\n            const list = await sections.findAll({\r\n                where: {\r\n                    ...req.params,\r\n                    status: true\r\n                },\r\n                attributes: ['key', 'value']\r\n            });\r\n\r\n            let section = {};\r\n            list.forEach(item => {\r\n                section[item.key] = item.value;\r\n            });\r\n\r\n            return res\r\n                .status(httpStatus.OK)\r\n                .json({\r\n                    status: list !== [],\r\n                    content: section\r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n    index: async (req, res) => {\r\n        try {\r\n            const { sections } = database;\r\n\r\n            const { name, key } = req.params;\r\n\r\n            const section = await sections.findOne({\r\n                where: { name, key }\r\n            });\r\n\r\n            return res\r\n                .status(httpStatus.OK)\r\n                .json({\r\n                    status: section !== null,\r\n                    content: section !== null ? section.value : ''\r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n    edit: async (req, res) => {\r\n        try {\r\n            const { sections } = database;\r\n\r\n            const { name, key } = req.params;\r\n\r\n            const oldData = await sections.findOne({\r\n                where: { name, key }\r\n            });\r\n            \r\n            if (oldData === null)\r\n                return res\r\n                    .status(httpStatus.BAD_REQUEST)\r\n                    .json({\r\n                        status: false,\r\n                        msg: 'Instance not found.'\r\n                    });\r\n            \r\n            if (key === \"img\" && req.file) {\r\n                if (oldData.value !== null && \r\n                    oldData.value !== \"\") {\r\n                    fs.unlink(  \r\n                        path.join(__dirname, '..', 'uploads', oldData.value),\r\n                        err => {\r\n                            if (err) console.error(err.stack);\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n\r\n            const [ flag ] = await sections.update({\r\n                ...oldData,\r\n                ...req.body,\r\n                value: req.file ? req.file.filename : oldData.value\r\n            }, { where: req.params });\r\n\r\n            const newData = await sections.findByPk(id);\r\n            return res\r\n                    .status(httpStatus.CREATED)\r\n                    .json({\r\n                        status: flag === 1,\r\n                        content: newData\r\n                    });\r\n        } catch (err) {\r\n            console.log(err);\r\n            return res\r\n                .status(httpStatus.INTERNAL_SERVER_ERROR)\r\n                .json({\r\n                    status: false,\r\n                    error: err.stack\r\n                });\r\n        }\r\n    },\r\n});\r\n\r\nexport default SectionController;\r\n"],"file":"sections.js"}