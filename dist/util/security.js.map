{"version":3,"sources":["../../src/util/security.js"],"names":["httpStatus","require","jwt","SECRET","security","login","user","password","auth","token","sign","id","authenticate","req","res","next","headers","status","UNAUTHORIZED","json","msg","verify","err","decoded","console","log","INTERNAL_SERVER_ERROR","userId","module","exports"],"mappings":";;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AAEA,IAAME,MAAM,GAAG,WAAf;AAEA,IAAMC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE,eAACC,IAAD,EAAOC,QAAP,EAAoB;AACvB,QAAID,IAAI,CAACC,QAAL,KAAkBA,QAAtB,EACI,OAAO;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAP;AAEJ,QAAMA,KAAK,GAAGP,GAAG,CAACQ,IAAJ,CAAS;AAAEC,MAAAA,EAAE,EAAEL,IAAI,CAACK;AAAX,KAAT,EAA0BR,MAA1B,CAAd;AACA,WAAO;AAAEK,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAALA;AAAd,KAAP;AACH,GAPY;AAQbG,EAAAA,YAAY,EAAE,sBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9B,QAAMN,KAAK,GAAGI,GAAG,CAACG,OAAJ,CAAY,gBAAZ,CAAd;AAEA,QAAI,CAACP,KAAL,EACI,OAAOK,GAAG,CAACG,MAAJ,CAAWjB,UAAU,CAACkB,YAAtB,EAAoCC,IAApC,CAAyC;AAAEX,MAAAA,IAAI,EAAE,KAAR;AAAeY,MAAAA,GAAG,EAAE;AAApB,KAAzC,CAAP;AAEJlB,IAAAA,GAAG,CAACmB,MAAJ,CAAWZ,KAAX,EAAkBN,MAAlB,EAA0B,UAASmB,GAAT,EAAcC,OAAd,EAAuB;AAC7C,UAAID,GAAJ,EAAS;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,eAAOR,GAAG,CACDG,MADF,CACSjB,UAAU,CAAC0B,qBADpB,EAEEP,IAFF,CAEO;AAAEX,UAAAA,IAAI,EAAE,KAAR;AAAeY,UAAAA,GAAG,EAAE;AAApB,SAFP,CAAP;AAGH,OAN4C,CAQ7C;;;AACAP,MAAAA,GAAG,CAACc,MAAJ,GAAaJ,OAAO,CAACZ,EAArB;AAEAI,MAAAA,IAAI;AACP,KAZD;AAaH;AA3BY,CAAjB;AA8BAa,MAAM,CAACC,OAAP,GAAiBzB,QAAjB","sourcesContent":["const httpStatus = require('http-status');\nconst jwt = require('jsonwebtoken');\n\nconst SECRET = 'p0s1t1v3.';\n\nconst security = {\n    login: (user, password) => {\n        if (user.password !== password) \n            return { auth: false, token: null };\n\n        const token = jwt.sign({ id: user.id }, SECRET);\n        return { auth: true, token };\n    },\n    authenticate: (req, res, next) => {\n        const token = req.headers['x-access-token'];\n    \n        if (!token)\n            return res.status(httpStatus.UNAUTHORIZED).json({ auth: false, msg: 'No token provided.' });\n        \n        jwt.verify(token, SECRET, function(err, decoded) {\n            if (err) {\n                console.log(err)\n                return res\n                        .status(httpStatus.INTERNAL_SERVER_ERROR)\n                        .json({ auth: false, msg: 'Failed to authenticate token.' });\n            }\n            \n            // se tudo estiver ok, salva no request para uso posterior\n            req.userId = decoded.id;\n            \n            next();\n        });\n    }\n};\n\nmodule.exports = security;"],"file":"security.js"}