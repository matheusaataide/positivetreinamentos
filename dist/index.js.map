{"version":3,"sources":["../src/index.js"],"names":["server","pathEnv","process","env","NODE_ENV","dotenv","config","path","resolve","__dirname","use","bodyParser","urlencoded","limit","extended","json","err","req","res","next","console","error","stack","status","send","routes","baseDir","express","get","sendFile","root","port","PORT","listen","log","toUpperCase","HOST"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;;;AAEA,IAAMA,MAAM,GAAG,0BAAf;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACA,UADA,GAEA,MAFhB;;AAGAC,mBAAOC,MAAP,CAAc;AACVC,EAAAA,IAAI,EAAEA,iBAAKC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8BR,OAA9B;AADI,CAAd,E,CAIA;;;AACAD,MAAM,CAACU,GAAP,CACIC,uBAAWC,UAAX,CAAsB;AAClBC,EAAAA,KAAK,EAAE,MADW;AAElBC,EAAAA,QAAQ,EAAE;AAFQ,CAAtB,CADJ,EAKIH,uBAAWI,IAAX,EALJ,EAMI,uBANJ,EAOI,wBAAOb,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyC,KAAzC,GAAiD,UAAxD,CAPJ,EAQI,UAACY,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AACrBC,EAAAA,OAAO,CAACC,KAAR,CAAcL,GAAG,CAACM,KAAlB;AACAJ,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACH,CAXL,E,CAcA;;AACAxB,MAAM,CAACU,GAAP,CAAW,MAAX,EAAmBe,kBAAnB,E,CAEA;;AACA,IAAMC,OAAO,aAAMjB,SAAN,sBAAb;AACAT,MAAM,CAACU,GAAP,CAAWiB,wCAAkBD,OAAlB,EAAX;AAEA1B,MAAM,CAACU,GAAP,CAAW,UAAX,EAAuBiB,8BAAe,WAAf,CAAvB;AACA3B,MAAM,CAAC4B,GAAP,CAAW,GAAX,EAAgB,UAACX,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACW,QAAJ,CAAa,YAAb,EAA2B;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAA3B,CAAd;AAAA,CAAhB;AACA1B,MAAM,CAAC4B,GAAP,CAAW,GAAX,EAAgB,UAACX,GAAD,EAAMC,GAAN,EAAc;AAC1BA,EAAAA,GAAG,CAACW,QAAJ,CAAa,YAAb,EAA2B;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAA3B;AACH,CAFD;AAKA,IAAMK,IAAI,GAAG7B,OAAO,CAACC,GAAR,CAAY6B,IAAZ,IAAoB,IAAjC;AACAhC,MAAM,CAACiC,MAAP,CAAcF,IAAd,EAAoB,YAAM;AACtBX,EAAAA,OAAO,CAACc,GAAR,YAAiBhC,OAAO,CAACC,GAAR,CAAYC,QAAZ,CAAqB+B,WAArB,EAAjB,oCAA8EjC,OAAO,CAACC,GAAR,CAAYiC,IAA1F,cAAkGL,IAAlG;AACH,CAFD;eAIe/B,M","sourcesContent":["import express from 'express';\r\nimport dotenv from 'dotenv';\r\nimport path from 'path';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\n\r\nimport 'regenerator-runtime';\r\n\r\nimport routes from './routes';\r\n\r\nconst server = express();\r\n\r\nconst pathEnv = process.env.NODE_ENV === \"development\" ?\r\n                \".env.dev\" :\r\n                \".env\";\r\ndotenv.config({\r\n    path: path.resolve(__dirname, '..', pathEnv)\r\n});\r\n\r\n// middlewares\r\nserver.use(\r\n    bodyParser.urlencoded({\r\n        limit: '25mb',\r\n        extended: true\r\n    }),\r\n    bodyParser.json(),\r\n    cors(),\r\n    morgan(process.env.NODE_ENV === \"development\" ? \"dev\" : \"combined\"),\r\n    (err, req, res, next) => {\r\n        console.error(err.stack);\r\n        res.status(500).send('Something broke!');\r\n    }\r\n);\r\n\r\n// Disponibilizando API\r\nserver.use('/api', routes);\r\n\r\n// Front end\r\nconst baseDir = `${__dirname}/../client/build/`\r\nserver.use(express.static(`${baseDir}`));\r\n\r\nserver.use('/uploads', express.static('./uploads'));\r\nserver.get('/', (req, res) => res.sendFile('index.html', { root: baseDir }));\r\nserver.get('*', (req, res) => {\r\n    res.sendFile('index.html', { root: baseDir });\r\n});\r\n\r\n\r\nconst port = process.env.PORT || 3000;\r\nserver.listen(port, () => {\r\n    console.log(`[${ process.env.NODE_ENV.toUpperCase() }] Server is running on ${process.env.HOST}:${port}`);\r\n});\r\n\r\nexport default server;"],"file":"index.js"}