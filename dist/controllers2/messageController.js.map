{"version":3,"sources":["../../src/controllers2/messageController.js"],"names":["httpStatus","require","email","newMsgTemplate","MessageController","database","req","res","messages","destroy","where","params","flag","status","OK","json","success","get","findByPk","id","message","getAll","findAll","save","create","body","msg","to","process","env","TO_EMAIL","send","content","err","console","table","CREATED","edit","update","post","module","exports"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,qBAAD,CAArB;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,2CAAD,CAA9B;;AAEA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,QAAQ;AAAA,SAAK;AACnC;AAAA,6EAAQ,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,gBAAAA,QADJ,GACiBH,QADjB,CACIG,QADJ;AAAA;AAAA,uBAEeA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,kBAAAA,KAAK,EAAEJ,GAAG,CAACK;AAAb,iBAAjB,CAFf;;AAAA;AAEEC,gBAAAA,IAFF;AAAA,iDAGGL,GAAG,CAACM,MAAJ,CAAWb,UAAU,CAACc,EAAtB,EAA0BC,IAA1B,CAA+B;AAAEC,kBAAAA,OAAO,EAAEJ;AAAX,iBAA/B,CAHH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAR;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADmC;AAMnCK,IAAAA,GAAG;AAAA,yEAAE,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACOC,gBAAAA,QADP,GACoBH,QADpB,CACOG,QADP;AAAA;AAAA,uBAEqBA,QAAQ,CAACU,QAAT,CAAkBZ,GAAG,CAACK,MAAJ,CAAWQ,EAA7B,CAFrB;;AAAA;AAEKC,gBAAAA,OAFL;AAAA,kDAGMb,GAAG,CAACM,MAAJ,CAAWb,UAAU,CAACc,EAAtB,EAA0BC,IAA1B,CAA+BK,OAA/B,CAHN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OANgC;AAWnCC,IAAAA,MAAM;AAAA,4EAAE,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,QADR,GACqBH,QADrB,CACQG,QADR;AAAA,+BAEOD,GAAG,CAACM,MAAJ,CAAWb,UAAU,CAACc,EAAtB,CAFP;AAAA;AAAA,uBAE4CN,QAAQ,CAACc,OAAT,EAF5C;;AAAA;AAAA;AAAA,+DAEiCP,IAFjC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAX6B;AAenCQ,IAAAA,IAAI;AAAA,0EAAE,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,gBAAAA,QADN,GACmBH,QADnB,CACMG,QADN;AAAA;AAAA,uBAGgBA,QAAQ,CAACgB,MAAT,CAAgBlB,GAAG,CAACmB,IAApB,CAHhB;;AAAA;AAGIC,gBAAAA,GAHJ;AAKIC,gBAAAA,EALJ,GAKS;AACP,0BAAQ,uBADD;AAEP,2BAASC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB;AAF1B,iBALT;;AASF,oBAAI;AACA5B,kBAAAA,KAAK,CAAC6B,IAAN,CACQ,CAACJ,EAAD,CADR,EAEQ,qCAFR,EAGQxB,cAAc,CAACuB,GAAG,CAACM,OAAL,CAHtB;AAKH,iBAND,CAME,OAAOC,GAAP,EAAY;AACVC,kBAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;;AAjBC,kDAmBK1B,GAAG,CAACM,MAAJ,CAAWb,UAAU,CAACoC,OAAtB,EAA+BrB,IAA/B,CAAoCW,GAApC,CAnBL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAf+B;AAoCnCW,IAAAA,IAAI;AAAA,0EAAE,kBAAO/B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,gBAAAA,QADN,GACmBH,QADnB,CACMG,QADN;AAAA;AAAA,uBAEiBA,QAAQ,CAAC8B,MAAT,CAAgBhC,GAAG,CAACmB,IAApB,EAA0B;AAAEf,kBAAAA,KAAK,EAAEJ,GAAG,CAACK;AAAb,iBAA1B,CAFjB;;AAAA;AAEI4B,gBAAAA,IAFJ;AAAA,kDAGKhC,GAAG,CAACM,MAAJ,CAAWb,UAAU,CAACoC,OAAtB,EAA+BrB,IAA/B,CAAoCwB,IAApC,CAHL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AApC+B,GAAL;AAAA,CAAlC;;AA4CAC,MAAM,CAACC,OAAP,GAAiBrC,iBAAjB","sourcesContent":["const httpStatus = require('http-status');\n\nconst email = require('../util/emailSender');\nconst newMsgTemplate = require('../util/emailTemplates/newMessageTemplate');\n\nconst MessageController = database => ({\n    delete: async (req, res) => {\n        const { messages } = database;\n        const flag = await messages.destroy({ where: req.params });\n        return res.status(httpStatus.OK).json({ success: flag });\n    },\n    get: async (req, res) => {\n        const { messages } = database;\n        const message = await messages.findByPk(req.params.id);\n        return res.status(httpStatus.OK).json(message);\n    },\n    getAll: async (req, res) => {\n            const { messages } = database;\n            return res.status(httpStatus.OK).json(await messages.findAll());\n        },\n    save: async (req, res) => {\n        const { messages } = database;\n\n        const msg = await messages.create(req.body); \n\n        const to = { \n            \"name\": \"Positive Treinamentos\",\n            \"email\": process.env.TO_EMAIL || 'contato@matheusataide.com.br'\n        }\n        try {\n            email.send(\n                    [to],\n                    \"Recebemos uma nova mensagem no site\",\n                    newMsgTemplate(msg.content)\n                );\n        } catch (err) {\n            console.table(err);    \n        }\n\n        return res.status(httpStatus.CREATED).json(msg);\n    },\n    edit: async (req, res) => {\n        const { messages } = database;\n        const post = await messages.update(req.body, { where: req.params });\n        return res.status(httpStatus.CREATED).json(post);\n    }\n});\n\n\nmodule.exports = MessageController;"],"file":"messageController.js"}