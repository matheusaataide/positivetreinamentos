{"version":3,"sources":["../../src/controllers2/postController.js"],"names":["httpStatus","require","PostController","database","req","res","posts","destroy","where","params","flag","status","OK","json","success","get","findByPk","id","post","getAll","findAll","save","create","body","newInstance","CREATED","edit","update","module","exports"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ;AAAA,SAAK;AAChC;AAAA,6EAAQ,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,gBAAAA,KADJ,GACcH,QADd,CACIG,KADJ;AAAA;AAAA,uBAEeA,KAAK,CAACC,OAAN,CAAc;AAAEC,kBAAAA,KAAK,EAAEJ,GAAG,CAACK;AAAb,iBAAd,CAFf;;AAAA;AAEEC,gBAAAA,IAFF;AAAA,iDAGGL,GAAG,CAACM,MAAJ,CAAWX,UAAU,CAACY,EAAtB,EAA0BC,IAA1B,CAA+B;AAAEC,kBAAAA,OAAO,EAAEJ;AAAX,iBAA/B,CAHH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAR;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADgC;AAMhCK,IAAAA,GAAG;AAAA,yEAAE,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACOC,gBAAAA,KADP,GACiBH,QADjB,CACOG,KADP;AAAA;AAAA,uBAEkBA,KAAK,CAACU,QAAN,CAAeZ,GAAG,CAACK,MAAJ,CAAWQ,EAA1B,CAFlB;;AAAA;AAEKC,gBAAAA,IAFL;AAAA,kDAGMb,GAAG,CAACM,MAAJ,CAAWX,UAAU,CAACY,EAAtB,EAA0BC,IAA1B,CAA+BK,IAA/B,CAHN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAN6B;AAWhCC,IAAAA,MAAM;AAAA,4EAAE,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,KADR,GACkBH,QADlB,CACQG,KADR;AAAA,+BAEOD,GAAG,CAACM,MAAJ,CAAWX,UAAU,CAACY,EAAtB,CAFP;AAAA;AAAA,uBAE4CN,KAAK,CAACc,OAAN,EAF5C;;AAAA;AAAA;AAAA,+DAEiCP,IAFjC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAX0B;AAehCQ,IAAAA,IAAI;AAAA,0EAAE,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,gBAAAA,KADN,GACgBH,QADhB,CACMG,KADN;AAAA;AAAA,uBAGwBA,KAAK,CAACgB,MAAN,CAAalB,GAAG,CAACmB,IAAjB,CAHxB;;AAAA;AAGIC,gBAAAA,WAHJ;AAAA,kDAKKnB,GAAG,CAACM,MAAJ,CAAWX,UAAU,CAACyB,OAAtB,EAA+BZ,IAA/B,CAAoCW,WAApC,CALL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAf4B;AAsBhCE,IAAAA,IAAI;AAAA,0EAAE,kBAAOtB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,gBAAAA,KADN,GACgBH,QADhB,CACMG,KADN;AAAA;AAAA,uBAEiBA,KAAK,CAACqB,MAAN,CAAavB,GAAG,CAACmB,IAAjB,EAAuB;AAAEf,kBAAAA,KAAK,EAAEJ,GAAG,CAACK;AAAb,iBAAvB,CAFjB;;AAAA;AAEIS,gBAAAA,IAFJ;AAAA,kDAGKb,GAAG,CAACM,MAAJ,CAAWX,UAAU,CAACyB,OAAtB,EAA+BZ,IAA/B,CAAoCK,IAApC,CAHL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAtB4B,GAAL;AAAA,CAA/B;;AA8BAU,MAAM,CAACC,OAAP,GAAiB3B,cAAjB","sourcesContent":["const httpStatus = require('http-status');\n\nconst PostController = database => ({\n    delete: async (req, res) => {\n        const { posts } = database;\n        const flag = await posts.destroy({ where: req.params });\n        return res.status(httpStatus.OK).json({ success: flag });\n    },\n    get: async (req, res) => {\n        const { posts } = database;\n        const post = await posts.findByPk(req.params.id);\n        return res.status(httpStatus.OK).json(post);\n    },\n    getAll: async (req, res) => {\n            const { posts } = database;\n            return res.status(httpStatus.OK).json(await posts.findAll());\n        },\n    save: async (req, res) => {\n        const { posts } = database;\n\n        const newInstance = await posts.create(req.body); \n\n        return res.status(httpStatus.CREATED).json(newInstance);\n    },\n    edit: async (req, res) => {\n        const { posts } = database;\n        const post = await posts.update(req.body, { where: req.params });\n        return res.status(httpStatus.CREATED).json(post);\n    }\n});\n\n\nmodule.exports = PostController;"],"file":"postController.js"}