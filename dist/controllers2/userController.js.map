{"version":3,"sources":["../../src/controllers2/userController.js"],"names":["httpStatus","require","path","fs","security","UserController","database","req","res","users","findByPk","params","id","user","status","BAD_REQUEST","json","success","msg","profilePic","unlink","join","__dirname","err","console","error","stack","destroy","where","flag","OK","data","INTERNAL_SERVER_ERROR","get","getAll","graduations","findAll","include","model","order","list","save","newUser","body","file","filename","create","CREATED","edit","oldData","update","result","newData","log","login","username","password","findOne","auth","module","exports"],"mappings":"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","sourcesContent":["const httpStatus = require('http-status');\nconst path = require('path');\nconst fs = require('fs');\nconst security = require('../util/security');\n\n\nconst UserController = database => ({\n    delete: async (req, res) => {\n        try {\n            const { users } = database;\n        \n            const user = await users.findByPk(req.params.id);\n            if (user === null)\n                return res.status(httpStatus.BAD_REQUEST).json({\n                    success: false,\n                    msg: 'Instance not found.'\n                });\n\n            if (user.profilePic !== null && user.profilePic !== \"\") {\n                fs.unlink(path.join(__dirname, '..', 'uploads', user.profilePic),\n                            err => {\n                                if (err) console.error(err.stack);\n                            });\n            }\n\n            const flag = await users.destroy({ where: req.params });\n            return res.status(httpStatus.OK).json({ \n                success: true,\n                data: user\n             });\n        } catch (err) {\n            return res.status(httpStatus.INTERNAL_SERVER_ERROR).json({\n                success: false,\n                msg: 'Internal server error.'\n            });\n        }\n    },\n    get: async (req, res) => {\n        const { users } = database;\n        const user = await users.findByPk(req.params.id);\n        return res.status(httpStatus.OK).json(user);\n    },\n    getAll: async (req, res) => {\n            const { users, graduations } = database;\n\n            const list = await users.findAll({\n                include: [{ \n                    model: graduations,\n                    order: [['createdAt','ASC']]\n                }]\n            });\n\n            return res.status(httpStatus.OK).json(list);\n        },\n    save: async (req, res) => {\n        const { users } = database;\n\n        let newUser = { \n            ...req.body,\n            profilePic: req.file ? req.file.filename : ''\n         }\n\n        newUser = await users.create(newUser); \n\n        return res.status(httpStatus.CREATED).json(newUser);\n    },\n    edit: async (req, res) => {\n        try {\n            const { users } = database;\n            \n            const oldData = await users.findByPk(req.params.id);\n            if (oldData === null)\n                return res.status(httpStatus.BAD_REQUEST).json({\n                    success: false,\n                    msg: 'Instance not found.'\n                });\n            \n            if (req.file){\n                if (oldData.profilePic !== null && oldData.profilePic !== \"\") {\n                    fs.unlink(path.join(__dirname, '..', 'uploads', oldData.profilePic),\n                                err => {\n                                    if (err) console.error(err.stack);\n                                });\n                }\n            }\n\n            const result = await users.update({\n                ...oldData,\n                ...req.body,\n                profilePic: req.file ? req.file.filename : oldData.profilePic\n            }, { where: req.params });\n\n            const newData = await users.findByPk(req.params.id);\n            return res.status(httpStatus.CREATED).json({\n                success: result[0] === 1,\n                data: newData\n            });\n        } catch (err) {\n            console.log(err);\n            return res.status(httpStatus.INTERNAL_SERVER_ERROR).json({\n                success: false,\n                msg: 'Internal server error'\n            });\n        }\n    },\n\n    // Funcão responsável pela autenticação\n    login: async (req, res) => {\n        const { users } = database;\n\n        const { username, password } = req.body;\n\n        const user = await users.findOne({ where: { username: username }});\n        if (user === null) \n            return res.status(httpStatus.BAD_REQUEST).json({ auth: false });\n\n        return res.status(httpStatus.OK).json(security.login(user, password));   \n    }\n});\n\n\nmodule.exports = UserController;"],"file":"userController.js"}