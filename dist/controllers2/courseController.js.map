{"version":3,"sources":["../../src/controllers2/courseController.js"],"names":["httpStatus","require","CourseController","database","req","res","courses","destroy","where","params","flag","status","OK","BAD_REQUEST","json","success","INTERNAL_SERVER_ERROR","msg","error","get","findByPk","id","course","data","getAll","transformations","query","limit","offset","findAll","order","include","model","list","save","body","img","file","filename","createdById","userId","updatedById","create","newInstance","CREATED","edit","update","module","exports"],"mappings":"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","sourcesContent":["const httpStatus = require('http-status');\n\nconst CourseController = database => ({\n    delete: async (req, res) => {\n        try{ \n            const { courses } = database;\n            const flag = await courses.destroy({ where: req.params });\n            return res\n                    .status(flag ? httpStatus.OK : httpStatus.BAD_REQUEST)\n                    .json({ success: flag });\n        } catch (error) {\n            return res\n                    .status(httpStatus.INTERNAL_SERVER_ERROR)\n                    .json({ \n                        msg: \"Error: We can't delete this course!\",\n                        error\n                    });\n        }\n    },\n    get: async (req, res) => {\n        try {\n            const { courses } = database;\n            const course = await courses.findByPk(req.params.id);\n\n            if (course == null) // Caso nÃ£o encontre nenhum com este ID\n                return res\n                        .status(httpStatus.BAD_REQUEST)\n                        .json({\n                            msg: \"We can't find a course with this id!\",\n                            data: null\n                        });\n            return res\n                    .status(httpStatus.OK).json(course);\n        } catch (error) {\n            return res\n                    .status(httpStatus.INTERNAL_SERVER_ERROR)\n                    .json({ \n                        msg: \"Error: We can't recover this course!\",\n                        error\n                    });\n        }\n    },\n    getAll: async (req, res) => {\n        try {\n            const { courses, transformations } = database;\n            const { limit, offset } = req.query;\n\n            const list = await courses.findAll({\n                order: [['created_at', 'DESC']],\n                limit: limit || 3,\n                offset: offset || 0,\n                include: [{ model: transformations }]\n            });\n\n            return res\n                    .status(httpStatus.OK)\n                    .json(list);\n        } catch (error) {\n            return res\n                    .status(httpStatus.INTERNAL_SERVER_ERROR)\n                    .json({ \n                        msg: \"Error: We can't list the courses!\",\n                        error\n                    });\n        }\n    },\n    save: async (req, res) => {\n        try {\n            const { courses } = database;\n\n            const data = {\n                ...req.body,\n                img: req.file ? req.file.filename : '',\n                createdById: req.userId,\n                updatedById: req.userId\n            }\n            const newInstance = await courses.create(data); \n\n            return res\n                    .status(httpStatus.CREATED)\n                    .json(newInstance);\n        } catch (error) {\n            return res\n                    .status(httpStatus.INTERNAL_SERVER_ERROR)\n                    .json({ \n                        msg: \"Error: We can't save this course!\",\n                        error\n                    });\n        }    \n    },\n    edit: async (req, res) => {\n        try {\n            const { courses } = database;\n\n            const course = await courses.update(req.body, { where: req.params });\n\n            return res.status(httpStatus.CREATED).json(course);\n        } catch (error) {\n            return res\n                    .status(httpStatus.INTERNAL_SERVER_ERROR)\n                    .json({ \n                        msg: \"Error: We can't update this course!\",\n                        error\n                    });\n        }\n    }\n});\n\n\nmodule.exports = CourseController;"],"file":"courseController.js"}